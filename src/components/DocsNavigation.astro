---
import { getCommands } from '@utils/commands';
import { getDomains } from '@utils/domains/domains';
import { getEvents } from '@utils/events';
import { getServices } from '@utils/services/services';
import { getTeams } from '@utils/teams';
import { getUsers } from '@utils/users';
import config from '@eventcatalog';
import FilterableList from './FilterableList';

const events = await getEvents({ getAllVersions: false });
const commands = await getCommands({ getAllVersions: false });
const services = await getServices({ getAllVersions: false });
const domains = await getDomains({ getAllVersions: false });
const teams = await getTeams();
const users = await getUsers();

const messages = [...events, ...commands];

const allData = [ ...domains, ...services, ...messages, ...teams, ...users];

const fetchHeadings = allData.map(async (item) => {
  const renderHeadings = config?.docs?.sidebar?.showPageHeadings ?? true;
  const headings = renderHeadings ? await item.render() : { headings: []};
  return {
    ...item,
    headings: headings.headings,
  };
});



const withHeadings =  await Promise.all(fetchHeadings);

const sideNav = withHeadings.reduce((acc, item) => {

  const title = (item.collection === 'events' || item.collection === 'commands') ? 'messages' : item.collection;

  const group = acc[title] || [];

  const navigationItem = {
    label: item.data.name,
    version: item.collection === 'teams' || item.collection === 'users' ? null : item.data.version,
    items: item.collection === 'users' ? [] : item.headings,
    // @ts-ignore
    href: item.data.version ? `/docs/${item.collection}/${item.data.id}/${item.data.version}` : `/docs/${item.collection}/${item.data.id}`,
  };

  group.push(navigationItem);

  return {
    ...acc,
    [title]: group,
  };
}, {} as any);

const currentPath = Astro.url.pathname;

---

<div class="font-light w-full xl:pr-10 pb-20 ">
    {
      Object.keys(sideNav).map((key) => {
        const collection = sideNav[key];
        if(key === 'messages'){
          return <FilterableList client:load collection={collection} currentPath={currentPath} />
        }
        console.log(key)
        return (
          <ul class=" w-full space-y-2 pb-8">
            <li class="font-semibold capitalize ">{key}</li>
            {collection.map((item: any) => {
              return (
                <li class="px-2 w-full text-md xl:text-lg border-l border-gray-200 space-y-2 scroll-m-20" id={item.href} >
                  <a class={`flex justify-between items-center w-full px-2 rounded-md font-normal ${currentPath.includes(item.href) ? 'bg-purple-200 text-purple-800 ' : 'font-thin'}`} href={`${item.href}`}>
                    <span class="block">{item.label}</span>
                    {item.version && <span class="block text-sm bg-purple-100 p-0.5 px-1 text-gray-600  rounded-md font-light">v{item.version}</span>}
                  </a>
                  <ul class="hidden xl:block px-4  text-gray-500 text-md space-y-2  ">
                    {item.items.map((heading: any) => {
                      return (
                        <li class="text-xs">
                          <a href={`${item.href}/#${heading.slug}`}>{heading.text}</a>
                        </li>
                      );
                    })}
                  </ul>
                </li>
              );
            })}
          </ul>
        );
      })
    }
</div>

<script>
  // Scroll to the current page element
  document.addEventListener('DOMContentLoaded', () => {
    const currentPath = document.location.pathname;
    const currentElement = document.getElementById(currentPath);
    if (currentElement) {
      // scroll to the current element with padding
      currentElement.scrollIntoView({
        behavior: 'auto',
        block: 'start',
        inline: 'start',
      });

      // currentElement.scrollIntoView({
      //   behavior: 'auto'
      // });
    }
  });
</script>